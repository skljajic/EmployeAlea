@model MVC.Models.mvcZaposleni

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm(null,null,FormMethod.Post,new { id = "registration", name="registration" }))

            //@using(Html.BeginForm("Action", "Controller", FormMethod.POST, new {ID = "MyID"}))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
        <h4>Employee</h4>
        <hr />
        
        <div class="form-group">
            @Html.LabelFor(model => model.Ime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Ime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Ime, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.username, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.username, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "form-control", @type = "password" } })
                @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
            </div>
        </div>

       

        <div class="form-group">
            @Html.LabelFor(model => model.level, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.level, new { htmlAttributes = new { @class = "form-control", @type = "hidden" } })
                @Html.ValidationMessageFor(model => model.level, "", new { @class = "text-danger" })
                <select id="ddLevel" class="control-label col-md-2">
                    <option value="User">User</option>
                    <option value="Head">Head</option>
                    <option value="Administrator">Administrator</option>

                </select>
            
                </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.status, new { @class = "control-label col-md-2", @value = "true" })
                    @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.nadredjen, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.nadredjen, new { htmlAttributes = new { @class = "form-control", @type = "hidden" } })
                @Html.ValidationMessageFor(model => model.nadredjen, "", new { @class = "text-danger" })
                <select id="dd" class = "control-label col-md-2">

                </select>
                </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.NadIme, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NadIme, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NadIme, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
                
               
            </div>
        </div>
        
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")

    <script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/jquery.validation/1.16.0/jquery.validate.min.js"></script>
    <script src="https://cdn.jsdelivr.net/jquery.validation/1.16.0/additional-methods.min.js"></script>



    <script type="text/javascript">

        $(document).ready(function () {

            var ddvalue = $('#nadredjen');
          
            var ddlevelValue = $('#level');




            $("#registration").removeAttr("novalidate");
            
           $("#status option[value='true']").attr("selected", true);
           

            $.ajax({
                method: "GET",
                url: "http://localhost:59862/api/nadredjeni",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    var dropdown = $('#dd');
                    
                    dropdown.empty();
                 //   dropdown.append('<option selected="selected" value="0">-- Select Head if level is:User --</option>');
                    $.each(data,
                        function(key, entry) {
                             

                          
                            dropdown.append($('<option></option>').attr('value', entry.id).text(entry.Ime));

                        });


                    
                },
                error: function (jqXhr) {

                    alert(jqXhr.responseText);
                }
            });

           
            $("#dd").change(function () {
                var izabran = this.value;
             
                ddvalue.val(izabran);
                
            });

            $("#ddLevel").change(function () {
                var izabran = this.value;
             
                ddlevelValue.val(izabran);
                
                if (izabran != 'User') {
                   
                    $("#dd").prop("disabled", true);
                } else {
                    $("#dd").prop("disabled", false);
                }
              
            });


            jQuery.validator.setDefaults({
                debug: true,
                success: "valid"
            });




            $("#registration").validate({

                rules: {
                    Ime: "required",
                    username: {
                        prviKarakter: "^[a-zA-Z]",
                        velikaSlova: "[A-Z]",
                        required: true,
                        minlength: 6,
                        maxlength: 15
                    },
                    password: {
                        velikaSlova: "[A-Z]",
                        malaSlova: "[a-z]",
                        broj: "[0-9]",
                        specKar: "[(?=.*\W)]",
                        required: true,

                        minlength: 8,
                        maxlength: 25
                    },
                    level: {
                        required: true

                    }
                },

                messages: {
                    Ime: "Please enter your name",
                    username: {
                        required: "Please provide a username",
                        minlength: "Your username must be at least 6 characters long",
                        maxlength: "Your password must be at least 15 characters long"
                    },
                    password: {
                        required: "Please provide a password",
                        minlength: "Your password must be at least 8 characters long",
                        maxlength: "Your password must be at least 25 characters long"
                    }

                },
                // Make sure the form is submitted to the destination defined
                // in the "action" attribute of the form when valid
                submitHandler: function (form) {
                    form.submit();
                }

            });

            $.validator.addMethod(
                "prviKarakter",
                function (value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                },
                "Your username must start with letter"
            );

            $.validator.addMethod(
                "velikaSlova",
                function (value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                },
                "Your password must have at least one Highercase letter."
            );

            $.validator.addMethod(
                "malaSlova",
                function (value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                },
                "Your password must have at least one lowercase letter."
            );

            $.validator.addMethod(
                "broj",
                function (value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                },
                "Your password must have at least one number."
            );

            $.validator.addMethod(
                "specKar",
                function (value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                },
                "Your password must have at least one special character."
            );







        });
    </script>
    


}